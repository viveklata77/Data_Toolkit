{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPvlNSxqoKFMWFeJtO+z7uO"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**DATA TOOLKIT**"],"metadata":{"id":"QNZAI28C6o5J"}},{"cell_type":"markdown","source":["**1. What is NumPy, and why is it widely used in Python?**\n","\n","Ans: NumPy (Numerical Python) is a fundamental library for numerical computing in Python.\n","It provides support for large, multi-dimensional arrays and matrices, along with a collection of high-level mathematical functions to operate on these arrays.\n","\n","Key reasons for NumPy's popularity:\n","\n","1. Performance\n","2. Efficiency\n","3. Broadcasting\n","4. Extensive Functionality\n","5. Ecosystem Integration\n"," In summary, NumPy is widely used because of its speed, efficiency, versatility, and its central role in the scientific Python ecosystem.\n","\n"],"metadata":{"id":"BEUueh0M6ptz"}},{"cell_type":"markdown","source":["**2. How does broadcasting work in NumPy?**\n","\n","Ans: Broadcasting in NumPy allows arithmetic operations between arrays of different shapes under certain conditions.\n","It avoids unnecessary memory copies and improves efficiency.  \n","\n","Example : Adding a scalar to an array\n","a = np.array([1, 2, 3])\n","\n","b = 2\n","\n","print(a + b)  # Output: [3 4 5]"],"metadata":{"id":"uGRoSloY7Qh3"}},{"cell_type":"markdown","source":["**3. What is a Pandas DataFrame?**\n","\n","Ans: prompt: What is a Pandas DataFrame\n"," A Pandas DataFrame is a two-dimensional, size-mutable, potentially heterogeneous tabular data structure with labeled axes (rows and columns).\n"," It's a fundamental data structure in the Pandas library for data manipulation and analysis in Python.\n"," Think of it like a spreadsheet or SQL table, but with more powerful data manipulation capabilities.\n","\n"],"metadata":{"id":"mWCYZe7E7ccG"}},{"cell_type":"markdown","source":["**4. Explain the use of the groupby() method in Pandas.**\n","\n","Ans: Pandas groupby() is a powerful and versatile function used for grouping rows of a DataFrame based on values in one or more columns.\n","\n","    df.groupby(by=column_name)\n","\n"],"metadata":{"id":"7fEaNttl7nua"}},{"cell_type":"markdown","source":["**5. Why is seaborn preferred for statistical visualizations?**\n","\n","Ans: Seaborn is preferred for statistical visualizations due to its high-level interface\n"," built on top of Matplotlib. It provides a variety of functions for creating informative and\n"," visually appealing statistical graphics.  Key advantages include:\n","\n"," 1. Statistical estimation: Seaborn automatically calculates and displays statistical estimates\n","(like mean, confidence intervals) in visualizations.  Matplotlib requires manual calculation\n","and plotting of these.\n","\n"," 2. Convenient plotting of distributions:  Seaborn offers functions like distplot, kdeplot,\n","and jointplot that simplify the creation of various distribution visualizations.\n","\n"," 3. Advanced plot types: Seaborn provides specialized plots such as violin plots, swarm plots,\n","and heatmaps which are particularly useful for visualizing relationships and distributions\n","in data, features not as readily available or convenient in Matplotlib.\n","\n"," 4. Integration with Pandas DataFrames: Seaborn works seamlessly with Pandas DataFrames,\n","making it easy to create visualizations directly from data structures commonly used in\n","data analysis.\n","\n"," 5. Aesthetic defaults: Seaborn's default plot styles and color palettes are generally considered\n","more visually appealing and informative compared to the basic Matplotlib styles.\n","\n"," In summary, while Matplotlib offers greater customization, Seaborn simplifies the creation of\n","statistically informative visualizations, leveraging the power of Matplotlib while providing\n","a more convenient interface."],"metadata":{"id":"u3THJeKD7qz9"}},{"cell_type":"markdown","source":["**6. What are the differences between NumPy arrays and Python lists?**\n","\n","Ans:\n","\n"," Key Differences between NumPy Arrays and Python Lists:\n","\n"," 1. Data Type Homogeneity:\n","    - NumPy arrays: Elements must be of the same data type (e.g., all integers, all floats).\n","    - Python lists: Elements can be of different data types within the same list.\n","\n"," 2. Memory Efficiency:\n","    - NumPy arrays: More memory-efficient due to homogenous data types and contiguous storage in memory.\n","    - Python lists: Less memory-efficient because they store pointers to objects of various data types, leading to overhead.\n","\n"," 3. Performance:\n","    - NumPy arrays: Significantly faster for numerical operations due to optimized vectorized operations implemented in C.\n","    - Python lists: Slower for numerical computations due to interpretation and dynamic typing.\n","\n"," 4. Functionality:\n","    - NumPy arrays: Rich set of built-in mathematical functions and operations for array manipulations.\n","    - Python lists: Basic operations; numerical operations require explicit looping.\n","\n"," 5. Broadcasting:\n","    - NumPy arrays: Support broadcasting, enabling operations between arrays of different shapes under specific rules.\n","    - Python lists: No broadcasting capability.\n","\n"," 6. Size Mutability:\n","   - NumPy arrays: Size is fixed after creation.  Resizing involves creating a new array.\n","    - Python lists: Size is dynamic; elements can be added or removed easily.\n","\n","\n"," Example: illustrating speed difference (optional):\n","\n","import numpy as np\n","\n","import time\n","\n","\n"," eg:-Create a large list and a NumPy array\n","\n","size = 1000000\n","\n","my_list = list(range(size))\n","\n","my_array = np.array(range(size))\n","\n","\n","\n","eg:-Time the sum operation for the list\n","\n","start_time = time.time()\n","\n","list_sum = sum(my_list)\n","\n","end_time = time.time()\n","\n","print(f\"Sum of list: {list_sum} (Time: {end_time - start_time:.6f} seconds)\")\n","\n","\n","\n"," eg:-Time the sum operation for the NumPy array\n","\n","start_time = time.time()\n","\n","array_sum = np.sum(my_array)\n","\n","end_time = time.time()\n","\n","print(f\"Sum of array: {array_sum} (Time: {end_time - start_time:.6f} seconds)\")\n","\n"],"metadata":{"id":"oxT806ds7tgM"}},{"cell_type":"markdown","source":["**7. What is a heatmap, and when should it be used?**\n","\n","Ans: A heatmap is a graphical representation of data where values are depicted by color.  It's essentially a matrix or table where each cell's color corresponds to the magnitude of the value it represents.  Warmer colors (like red or yellow) typically indicate higher values, while cooler colors (like blue or green) represent lower values.\n","\n","\n","When to use a heatmap:\n","\n","* When you want to quickly identify patterns or trends in a dataset with multiple variables.\n","* When you need to visualize relationships between two or more variables.\n","* When you want to highlight areas of high or low concentration in data.\n","* When a table or matrix of numbers is difficult to interpret visually.\n","\n","\n","When *not* to use a heatmap:\n","\n","* When the dataset is very large and complex, as it can become difficult to distinguish individual values.\n","* When precise numerical values are crucial, as heatmaps usually only provide visual approximations.  Use a table in such cases.\n","* When the relationship between variables is non-linear and difficult to capture with a color gradient."],"metadata":{"id":"rkFRN2_P72UP"}},{"cell_type":"markdown","source":["**8. What does the term “vectorized operation” mean in NumPy?**\n","\n","Ans: In NumPy, a vectorized operation refers to performing operations on entire arrays at once, rather than looping through individual elements.  This leverages optimized, pre-compiled C code under the hood, resulting in significantly faster execution compared to explicit Python loops.  It's a core feature that contributes to NumPy's performance advantage.\n"],"metadata":{"id":"SNvLO0cO7461"}},{"cell_type":"markdown","source":["**9. How does Matplotlib differ from Plotly?**\n","\n","Ans:\n"," Matplotlib vs. Plotly\n","\n"," Matplotlib:\n","\n","  Primarily a static plotting library.  Creates images (PNG, JPG, SVG, etc.) of plots.\n","\n","  Good for basic to intermediate plotting needs. Offers extensive customization options.\n","\n","  Typically used in scripts or Jupyter notebooks for generating visualizations to be viewed directly.\n","\n","  Less interactive than Plotly.\n","\n"," Plotly:\n","  \n","  Creates interactive plots.  Users can zoom, pan, hover for data details.\n","\n","  Better suited for web applications, dashboards, and presentations where interactivity is key.\n","\n","  Can generate plots that can be embedded in web pages or viewed in a browser.\n","\n","  Offers some static image export capabilities but interactivity is its strength."],"metadata":{"id":"rlq0x-VI78jW"}},{"cell_type":"markdown","source":["**10. What is the significance of hierarchical indexing in Pandas?**\n","\n","Ans: Hierarchical indexing in Pandas, also known as multi-indexing, allows you to have multiple levels of indices on an axis (rows or columns).  This enables representing higher-dimensional data in a lower-dimensional data structure (like a DataFrame), making it efficient to work with and analyze data that has a natural hierarchical structure.\n"],"metadata":{"id":"7F8XWc1o7_sq"}},{"cell_type":"markdown","source":["**11 What is the role of Seaborn’s pairplot() funtion?**\n","\n","Ans: Seaborn's `pairplot()` function creates a matrix of scatter plots for visualizing pairwise relationships between multiple variables in a dataset.  It's particularly useful for exploring correlations and patterns in data with several numerical features.  The diagonal of the matrix often displays histograms or kernel density estimates of individual variables.\n"],"metadata":{"id":"aDgCCow07g7y"}},{"cell_type":"markdown","source":["**12. What is the purpose of the describe() function in Pandas?**\n","\n","Ans: The `describe()` function in Pandas is used to generate descriptive statistics of a DataFrame or Series.  It provides a summary of the central tendency, dispersion, and shape of the distribution of numerical data.  This includes metrics like count, mean, standard deviation, minimum, maximum, and quartiles (25%, 50%, 75%).  It's a quick way to get an overview of the key characteristics of your data.\n","\n"],"metadata":{"id":"RfGObdLM8aZE"}},{"cell_type":"markdown","source":["**13. Why is handling missing data important in Pandas?**\n","\n","Ans: proper handling of missing data ensures data quality, prevents errors, enables accurate insights, and provides a foundation for building robust models and producing reliable results.\n"],"metadata":{"id":"JQTMp9ar8cmz"}},{"cell_type":"markdown","source":["**14. What are the benefits of using Plotly for data visualization?**\n","\n","Ans: Plotly creates interactive plots. Users can zoom, pan, and hover for data details.\n","  Plotly is better suited for web applications, dashboards, and presentations where interactivity is key.\n","  \n","  Plotly can generate plots that can be embedded in web pages or viewed in a browser.\n","  \n","  Plotly offers some static image export capabilities, but interactivity is its strength.\n"],"metadata":{"id":"bF2Pja3M8e3K"}},{"cell_type":"markdown","source":["**15. How does NumPy handle multidimensional arrays?**\n","\n","Ans: NumPy's core strength lies in its efficient handling of multidimensional arrays.  It provides a powerful N-dimensional array object (`ndarray`) that allows you to store and manipulate data in multiple dimensions (e.g., 1D for vectors, 2D for matrices, 3D for tensors, and so on).  NumPy uses contiguous memory allocation for these arrays, leading to efficient operations and optimized performance for numerical computations.  Key aspects of its multidimensional array capabilities:\n","\n","* **Shape:**  The `shape` attribute of an `ndarray` defines the dimensions of the array as a tuple of integers.  For example, a 2D array with 3 rows and 4 columns would have a shape of (3, 4).\n","\n","* **Data Type (dtype):**  NumPy arrays have a homogeneous data type, meaning all elements within the array must be of the same type (e.g., integers, floating-point numbers, complex numbers).  The data type is specified by the `dtype` attribute.\n","\n","* **Indexing and Slicing:**  NumPy provides flexible ways to access and manipulate elements in multidimensional arrays using indexing and slicing.  Multi-dimensional indexing allows you to pinpoint specific elements, and slicing creates views (or sub-arrays) of the original array without copying the data.\n","\n","* **Vectorized Operations:**  Operations on NumPy arrays are vectorized, meaning that they operate on entire arrays at once, leading to significant performance improvements over explicit loops. This is a key element in making NumPy so efficient.\n","\n","* **Broadcasting:**  NumPy's broadcasting rules extend the vectorized operations to arrays of different shapes, under certain conditions, without unnecessary memory copies. This enhances flexibility when performing operations between arrays of different sizes.\n"],"metadata":{"id":"j-11wABT8gp1"}},{"cell_type":"markdown","source":["**16.What is the role of Bokeh in data visualization?**\n","\n","Ans: Bokeh is a Python interactive visualization library that targets modern web browsers for presentation.  Its strength lies in creating interactive plots, dashboards, and data applications.  Bokeh excels at handling large datasets efficiently and generating visualizations that can be easily shared and explored online.\n","\n"],"metadata":{"id":"Cr-_S5bd7i0p"}},{"cell_type":"markdown","source":["**17. Explain the difference between apply() and map() in Pandas?**\n","\n","Ans:  In Pandas, both `apply()` and `map()` are used for applying functions to data, but they differ in their scope and how they operate:\n","\n"," 1. map():\n","    - Works on Series (single columns) only.\n","    - Applies a function element-wise to each value in a Series.\n","    - Can be used with dictionaries or functions for mapping values.\n","    - Generally faster for simple element-wise operations than `apply()`.\n","\n"," 2. apply():\n","    - Works on both Series and DataFrames.\n","    - For Series, it behaves similarly to `map()`, but can also handle more complex operations.\n","    - For DataFrames, it can apply a function to either rows or columns, or to the entire DataFrame.\n","    - More flexible than `map()` but can be slower for simple element-wise operations due to its overhead.\n"],"metadata":{"id":"E5qY--t88jwu"}},{"cell_type":"markdown","source":["**18. What are some advanced features of NumPy?**\n","\n","Ans:  Some advanced features of NumPy:\n","\n"," 1. Structured Arrays:\n","    - Allow you to create arrays where each element can have multiple fields with different data types.\n","    - Useful for representing heterogeneous data in a single array.\n","\n","import numpy as np\n","\n","data = np.zeros(4, dtype={'names': ('name', 'age', 'weight'),\n","                          'formats': ('U10', 'i4', 'f8')})\n","print(data.dtype)\n","\n"," 2. Memory Mapping:\n","    - Allows you to work with large arrays that don't fit in RAM by mapping them to disk files.\n","    - Efficiently loads and saves portions of the data as needed.\n","\n"," 3. Universal Functions (ufuncs):\n","    - Efficient element-wise functions that operate on NumPy arrays.\n","    - Examples include `np.add`, `np.sin`, `np.exp`, etc.\n","\n"," 4. Linear Algebra:\n","    - NumPy's `linalg` module provides functions for linear algebra operations.\n","    - Includes matrix multiplication, eigenvalue decomposition, solving linear equations, etc.\n","\n"," 5. Random Number Generation:\n","    - The `random` module provides functions for generating random numbers from various distributions.\n","\n"," 6. Fourier Transforms:\n","    - NumPy's `fft` module enables fast Fourier transforms, useful for signal processing and analysis.\n","\n"," 7. Polynomials:\n","    - The `polynomial` module provides tools for working with polynomials.\n","\n","\n"],"metadata":{"id":"nFC_QDn18mMw"}},{"cell_type":"markdown","source":["**19. How does Pandas simplify time series analysis?**\n","\n","Ans: Pandas simplifies time series analysis in several ways:\n","\n"," 1. DateTimeIndex: Pandas provides a specialized DateTimeIndex, which makes it easy to represent and work with time series data.  The DateTimeIndex automatically handles various time-related operations, such as indexing, slicing, and resampling.\n","\n"," 2. Time-Based Indexing and Slicing:  You can easily slice and dice your time series data based on dates and times using the DateTimeIndex. This makes it simple to select data for specific periods, intervals, or days of the week.\n","\n"," 3. Time Series-Specific Functions: Pandas offers a rich set of functions specifically designed for time series data. These include functions for resampling, rolling statistics (moving averages, etc.), lagging/leading data, and handling time zones.\n","\n"," 4. Date/Time Functionality: Pandas provides tools for working with dates and times, including parsing dates, handling time zones, and performing time-based calculations.\n","\n"," 5. Integration with Other Libraries: Pandas seamlessly integrates with other libraries for time series analysis, such as statsmodels and Prophet, enabling more advanced statistical modeling and forecasting.\n"],"metadata":{"id":"5IQ8Tzdw8pK_"}},{"cell_type":"markdown","source":["**20. What is the role of a pivot table in Pandas?**\n","\n","Ans: A pivot table in Pandas is used to reshape and summarize data.  It allows you to transform a DataFrame by aggregating values based on unique combinations of column values.  This is similar to pivot tables in spreadsheet software like Excel, providing a powerful way to explore and analyze data by grouping and summarizing it according to different criteria.\n","\n"],"metadata":{"id":"YRb9UuHY8rZm"}},{"cell_type":"markdown","source":["**21. Why is NumPy’s array slicing faster than Python’s list slicing?**\n","\n","Ans: NumPy arrays offer a combination of memory efficiency, contiguous storage, vectorized operations, and a low-level implementation that make slicing significantly faster compared to Python's list slicing, especially when working with large datasets or computationally intensive operations.\n","\n","NumPy's array slicing is faster than Python's list slicing due to several key factors:\n","\n"," 1. Data Type Homogeneity: NumPy arrays store elements of the same data type, whereas Python lists can contain elements of different types. This homogeneity allows NumPy to use more efficient memory layouts and optimized data access patterns.\n","\n"," 2. Contiguous Memory Allocation:  NumPy arrays typically store data in contiguous memory locations.  This enables faster access to elements and efficient vectorized operations.  Python lists, on the other hand, are essentially arrays of pointers to objects, which are scattered in memory.\n","\n"," 3. Vectorized Operations: NumPy is designed for vectorized operations, allowing computations on entire arrays at once.  Slicing in NumPy often produces views of the original array rather than copies, which further enhances performance. Python lists require explicit looping for similar operations, resulting in significantly slower execution times, especially for large datasets.\n","\n"," 4. Implementation in C: NumPy's core operations are implemented in highly optimized C code, which is generally much faster than interpreted Python code.  These C-level functions handle array slicing and other operations with minimal overhead.\n","\n","\n"],"metadata":{"id":"dvTo8TZ18tTd"}},{"cell_type":"markdown","source":["**22. What are some common use cases for Seaborn?**\n","\n","Ans:   Seaborn is commonly used for:\n","\n","* **Visualizing relationships between variables:**  Seaborn excels at creating plots that show how different variables in your dataset relate to each other.  This includes scatter plots, joint plots, and pair plots for exploring correlations, and plots like violin plots and swarm plots for visualizing distributions across different categories.\n","\n","* **Creating informative statistical visualizations:** Seaborn automatically handles statistical calculations and estimations (like mean, confidence intervals) within its visualizations.  This allows for quick creation of plots that convey statistical insights, such as distributions, trends, and relationships, without needing to manually compute these statistics.\n","\n","* **Exploring distributions of single variables:**  Seaborn provides convenient functions (like `distplot`, `kdeplot`) to visualize the distribution of a single variable, revealing its shape, central tendency, and spread.\n","\n","* **Comparing distributions across categories:**  Seaborn's violin plots and swarm plots are particularly effective at visualizing the distributions of a numerical variable across different categories or groups in your data.\n","\n","* **Visualizing categorical data:**  Plots like count plots, bar plots, and point plots can be used to analyze and present categorical data or counts within different categories.\n","\n","* **Creating heatmaps for correlation analysis:**  Heatmaps in Seaborn are used to visualize correlation matrices, highlighting the strength and direction of relationships between multiple variables.\n","\n","* **Customizing plots:** While Seaborn has aesthetically pleasing defaults, you can customize colors, styles, labels, and other aspects of your plots to match your preferences and presentation needs.  This flexibility ensures your visualizations are informative and visually appealing.\n"],"metadata":{"id":"jtslAOA08vcm"}},{"cell_type":"markdown","source":["**PRACTICAL**\n","\n"],"metadata":{"id":"9RTDO0TE7Ujh"}},{"cell_type":"markdown","source":["**1 How do you create a 2D NumPy array and calculate the sum of each row?**\n","\n"],"metadata":{"id":"m6ftQ7Cw9xod"}},{"cell_type":"code","source":["import numpy as np\n","\n","# Create a 2D NumPy array\n","my_array = np.array([[1, 2, 3],\n","                   [4, 5, 6],\n","                   [7, 8, 9]])\n","\n","# Calculate the sum of each row\n","row_sums = np.sum(my_array, axis=1)\n","\n","# Print the row sums\n","row_sums\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IGxcAE5H-QE4","executionInfo":{"status":"ok","timestamp":1745501558427,"user_tz":-330,"elapsed":934,"user":{"displayName":"Vivek Lata","userId":"06357303755057465735"}},"outputId":"deadc9e2-334d-4cc3-94d7-746ec80d7dd9"},"execution_count":1,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 6, 15, 24])"]},"metadata":{},"execution_count":1}]},{"cell_type":"markdown","source":["**2. Write a Pandas script to find the mean of a specific column in DataFrame.**\n"],"metadata":{"id":"4DYaRCCa94yy"}},{"cell_type":"code","source":["import pandas as pd\n","# Sample DataFrame (replace with your actual data)\n","data = {'col1': [1, 2, 3, 4, 5],\n","        'col2': [6, 7, 8, 9, 10],\n","        'col3': [11, 12, 13, 14, 15]}\n","df = pd.DataFrame(data)\n","\n","# Specify the column name\n","column_name = 'col2'\n","\n","# Calculate the mean of the specified column\n","mean_value = df[column_name].mean()\n","\n","# Print the mean\n","print(f\"The mean of column '{column_name}' is: {mean_value}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ocW4Sr6lARFs","executionInfo":{"status":"ok","timestamp":1745501721568,"user_tz":-330,"elapsed":1288,"user":{"displayName":"Vivek Lata","userId":"06357303755057465735"}},"outputId":"6e471285-1d0c-428a-c9ad-6f047d4f8bf4"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["The mean of column 'col2' is: 8.0\n"]}]},{"cell_type":"markdown","source":["**3. Create a scatter plot using plotly.**\n"],"metadata":{"id":"nSrBK_5n98Ll"}},{"cell_type":"code","source":["import plotly.express as px\n","x = [1, 2, 3, 4, 5]\n","y = [2, 4, 1, 5, 3]\n","\n","# Create the scatter plot\n","fig = px.scatter(x=x, y=y)\n","\n","# Display the plot\n","fig.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":542},"id":"nDhDlD2vBgTH","executionInfo":{"status":"ok","timestamp":1745502005838,"user_tz":-330,"elapsed":3766,"user":{"displayName":"Vivek Lata","userId":"06357303755057465735"}},"outputId":"d33ec7b8-c618-4d24-f143-2a62c9e192b8"},"execution_count":3,"outputs":[{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"fbd32453-122b-494f-bbe8-f1e7d9429e11\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"fbd32453-122b-494f-bbe8-f1e7d9429e11\")) {                    Plotly.newPlot(                        \"fbd32453-122b-494f-bbe8-f1e7d9429e11\",                        [{\"hovertemplate\":\"x=%{x}\\u003cbr\\u003ey=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\",\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[1,2,3,4,5],\"xaxis\":\"x\",\"y\":[2,4,1,5,3],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"x\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"y\"}},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60}},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('fbd32453-122b-494f-bbe8-f1e7d9429e11');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}]},{"cell_type":"markdown","source":["**4. How do you calculate the correlation matrix using Seaborn and visualize it with a heatmap?**\n","\n"],"metadata":{"id":"dTyxM-Zo9_Yq"}},{"cell_type":"code","source":["import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# Sample DataFrame (replace with your actual data)\n","data = {'col1': [1, 2, 3, 4, 5],\n","        'col2': [6, 7, 8, 9, 10],\n","        'col3': [11, 12, 13, 14, 15]}\n","df = pd.DataFrame(data)\n","\n","# Calculate the correlation matrix\n","correlation_matrix = df.corr()\n","\n","# Create the heatmap\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=\".2f\")\n","plt.title('Correlation Matrix Heatmap')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":545},"id":"SVEathQvDTEu","executionInfo":{"status":"ok","timestamp":1745502517184,"user_tz":-330,"elapsed":3498,"user":{"displayName":"Vivek Lata","userId":"06357303755057465735"}},"outputId":"c541e9f4-4808-470a-a5ef-f6048f6c26af"},"execution_count":4,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["**5. Create a bar plot using Plotly.**"],"metadata":{"id":"1UixHQDd-BbY"}},{"cell_type":"code","source":["import plotly.graph_objects as go\n","categories = ['A', 'B', 'C', 'D', 'E']\n","values = [15, 25, 10, 30, 20]\n","\n","fig = go.Figure(data=[go.Bar(x=categories, y=values)])\n","\n","fig.update_layout(title='Bar Plot Example', xaxis_title='Categories', yaxis_title='Values')\n","\n","fig.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":542},"id":"xDMch5uCDw5j","executionInfo":{"status":"ok","timestamp":1745502588439,"user_tz":-330,"elapsed":504,"user":{"displayName":"Vivek Lata","userId":"06357303755057465735"}},"outputId":"8b1733d8-c931-4140-c6ac-09c11499296b"},"execution_count":5,"outputs":[{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"049df387-12f5-404c-a939-587514327161\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"049df387-12f5-404c-a939-587514327161\")) {                    Plotly.newPlot(                        \"049df387-12f5-404c-a939-587514327161\",                        [{\"x\":[\"A\",\"B\",\"C\",\"D\",\"E\"],\"y\":[15,25,10,30,20],\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"title\":{\"text\":\"Bar Plot Example\"},\"xaxis\":{\"title\":{\"text\":\"Categories\"}},\"yaxis\":{\"title\":{\"text\":\"Values\"}}},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('049df387-12f5-404c-a939-587514327161');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}]},{"cell_type":"markdown","source":["**6. Create a DataFrame and add a new column based on existing column.**"],"metadata":{"id":"HvwAcAgP90LS"}},{"cell_type":"code","source":["import pandas as pd\n","data = {'A': [1, 2, 3, 4, 5], 'B': [6, 7, 8, 9, 10]}\n","df = pd.DataFrame(data)\n","\n","# Add a new column 'C' where each value is twice the corresponding value in column 'A'\n","df['C'] = df['A'] * 2\n","\n","df\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"woIIPqOJELpF","executionInfo":{"status":"ok","timestamp":1745502687230,"user_tz":-330,"elapsed":736,"user":{"displayName":"Vivek Lata","userId":"06357303755057465735"}},"outputId":"1a3c6e15-bfce-4051-9c47-18900cf08402"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   A   B   C\n","0  1   6   2\n","1  2   7   4\n","2  3   8   6\n","3  4   9   8\n","4  5  10  10"],"text/html":["\n","  <div id=\"df-8eee21f9-bb66-4370-a558-78e057cef859\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>A</th>\n","      <th>B</th>\n","      <th>C</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>6</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>7</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>8</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>9</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>10</td>\n","      <td>10</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8eee21f9-bb66-4370-a558-78e057cef859')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8eee21f9-bb66-4370-a558-78e057cef859 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8eee21f9-bb66-4370-a558-78e057cef859');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6bd9d909-ceb2-4074-891d-b6f351928791\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6bd9d909-ceb2-4074-891d-b6f351928791')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6bd9d909-ceb2-4074-891d-b6f351928791 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_a5b893d1-1659-42fc-8cc9-a35f7147eb73\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_a5b893d1-1659-42fc-8cc9-a35f7147eb73 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"A\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2,\n          5,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 6,\n        \"max\": 10,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7,\n          10,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"C\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 2,\n        \"max\": 10,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4,\n          10,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","source":["**7. Write a program to perform element wise multiplication of two NumPy arrays.**\n"],"metadata":{"id":"sEBLI3NE-K62"}},{"cell_type":"code","source":["import numpy as np\n","\n","# Example arrays (replace with your actual arrays)\n","array1 = np.array([1, 2, 3, 4, 5])\n","array2 = np.array([6, 7, 8, 9, 10])\n","\n","# Element-wise multiplication using the * operator\n","result_array = array1 * array2\n","\n","result_array\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_Csu4jo1Eh1x","executionInfo":{"status":"ok","timestamp":1745502769131,"user_tz":-330,"elapsed":15,"user":{"displayName":"Vivek Lata","userId":"06357303755057465735"}},"outputId":"fdd6c8fe-6078-4d76-a0b6-4162b970a8cf"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 6, 14, 24, 36, 50])"]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["**8. Create a lie plot with multiple lines using a Matplotlib?**\n"],"metadata":{"id":"cLrnszkL-PLu"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# Sample data (replace with your actual data)\n","x = [1, 2, 3, 4, 5]\n","y1 = [2, 4, 1, 5, 3]\n","y2 = [1, 3, 2, 4, 5]\n","y3 = [3, 1, 4, 2, 5]\n","\n","# Create the plot\n","plt.plot(x, y1, label='Line 1')\n","plt.plot(x, y2, label='Line 2')\n","plt.plot(x, y3, label='Line 3')\n","\n","# Customize the plot\n","plt.xlabel('X-axis')\n","plt.ylabel('Y-axis')\n","plt.title('Multiple Line Plot')\n","plt.legend()\n","plt.grid(True)\n","\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"J-sSUiw4EsvY","executionInfo":{"status":"ok","timestamp":1745502839585,"user_tz":-330,"elapsed":903,"user":{"displayName":"Vivek Lata","userId":"06357303755057465735"}},"outputId":"8a90c6b7-6d49-436d-a47c-66c095ef7a13"},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["**9. Generate a Pandas DataFrame and filter rows where a column value is greater than a threshold.**\n"],"metadata":{"id":"DggUhBRO-Sxv"}},{"cell_type":"code","source":["import pandas as pd\n","\n","# Sample DataFrame\n","data = {'col1': [1, 2, 3, 4, 5], 'col2': [6, 7, 8, 9, 10]}\n","df = pd.DataFrame(data)\n","\n","# Threshold value\n","threshold = 3\n","\n","# Filter rows where 'col1' is greater than the threshold\n","filtered_df = df[df['col1'] > threshold]\n","\n","filtered_df\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":125},"id":"GPc6bRFFFsq1","executionInfo":{"status":"ok","timestamp":1745503246070,"user_tz":-330,"elapsed":527,"user":{"displayName":"Vivek Lata","userId":"06357303755057465735"}},"outputId":"11385c7c-b44a-4040-cd95-1a48c0e7983f"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   col1  col2\n","3     4     9\n","4     5    10"],"text/html":["\n","  <div id=\"df-12357919-76fe-470a-b637-02060b1bb592\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>col1</th>\n","      <th>col2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>10</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-12357919-76fe-470a-b637-02060b1bb592')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-12357919-76fe-470a-b637-02060b1bb592 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-12357919-76fe-470a-b637-02060b1bb592');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-50c35211-149a-4fd1-a7f1-8413672fd5b4\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-50c35211-149a-4fd1-a7f1-8413672fd5b4')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-50c35211-149a-4fd1-a7f1-8413672fd5b4 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_9be3bbbe-cc20-42c7-991a-274fc7894fed\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('filtered_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_9be3bbbe-cc20-42c7-991a-274fc7894fed button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('filtered_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"filtered_df","summary":"{\n  \"name\": \"filtered_df\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"col1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 4,\n        \"max\": 5,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          5,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"col2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 9,\n        \"max\": 10,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          10,\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","source":["**10. Create a histogram using Seaborn to visualize a distribution.**\n"],"metadata":{"id":"McDkSR-8-VyZ"}},{"cell_type":"code","source":["import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# Sample data (replace with your actual data)\n","data = [1, 2, 2, 3, 3, 3, 4, 4, 5]\n","\n","# Create the histogram\n","sns.histplot(data, kde=True)\n","\n","# Customize the plot (optional)\n","plt.xlabel(\"Value\")\n","plt.ylabel(\"Frequency\")\n","plt.title(\"Histogram of Data\")\n","\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"UBWcnnUBGs0Z","executionInfo":{"status":"ok","timestamp":1745503383995,"user_tz":-330,"elapsed":16,"user":{"displayName":"Vivek Lata","userId":"06357303755057465735"}},"outputId":"2aba1b46-b85b-4297-be4d-515c6d67c1e8"},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["**11 Perform matrix multiplication using NumPy.**\n"],"metadata":{"id":"jiKchG6S-ZJb"}},{"cell_type":"code","source":["import numpy as np\n","# Example matrices (replace with your actual matrices)\n","matrix1 = np.array([[1, 2], [3, 4]])\n","matrix2 = np.array([[5, 6], [7, 8]])\n","\n","# Matrix multiplication using the @ operator or np.dot()\n","result_matrix = matrix1 @ matrix2\n","\n","result_matrix\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NMVNvJyxHG1Y","executionInfo":{"status":"ok","timestamp":1745503459277,"user_tz":-330,"elapsed":426,"user":{"displayName":"Vivek Lata","userId":"06357303755057465735"}},"outputId":"570d2a6b-5910-4981-d4a8-d35efad37976"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[19, 22],\n","       [43, 50]])"]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","source":["**12. Use Pandas to load a CSV file and display its first 5 rows.**\n"],"metadata":{"id":"hr8sXwPU-ceO"}},{"cell_type":"code","source":["import pandas as pd\n","df = pd.read_csv('https://raw.githubusercontent.com/ingledarshan/upGrad_Darshan/refs/heads/main/SuperStore.csv')\n","\n","# Display the first 5 rows\n","print(df.head(5))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ejJjk-12HlSj","executionInfo":{"status":"ok","timestamp":1745503843818,"user_tz":-330,"elapsed":421,"user":{"displayName":"Vivek Lata","userId":"06357303755057465735"}},"outputId":"6427c9d0-2a01-41ed-d1b7-1b6aea87200b"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["          Category          City        Country Customer ID  Customer Name  \\\n","0  Office Supplies       Houston  United States    DP-13000  Darren Powers   \n","1  Office Supplies    Naperville  United States    PO-19195  Phillina Ober   \n","2  Office Supplies    Naperville  United States    PO-19195  Phillina Ober   \n","3  Office Supplies    Naperville  United States    PO-19195  Phillina Ober   \n","4  Office Supplies  Philadelphia  United States    MB-18085     Mick Brown   \n","\n","  Order Date        Order ID Order ID (Returns)          Person  Postal Code  \\\n","0   03/01/14  CA-2014-103800                NaN  Kelly Williams        77095   \n","1   04/01/14  CA-2014-112326                NaN  Kelly Williams        60540   \n","2   04/01/14  CA-2014-112326                NaN  Kelly Williams        60540   \n","3   04/01/14  CA-2014-112326                NaN  Kelly Williams        60540   \n","4   05/01/14  CA-2014-141817                NaN     Chuck Magee        19143   \n","\n","   ... Sub-Category Discount  Number of Records OrderUntilShip    Profit  \\\n","0  ...        Paper      0.2                  1              4    5.5512   \n","1  ...      Binders      0.8                  1              4    -5.487   \n","2  ...       Labels      0.2                  1              4    4.2717   \n","3  ...      Storage      0.2                  1              4  -64.7748   \n","4  ...          Art      0.2                  1              7     4.884   \n","\n","  Profit/1 client  Quantity     ROS    Sales Sales/1 order  \n","0          5.5512         2  0.3375   16.448        16.448  \n","1          -5.487         2 -1.5500     3.54          3.54  \n","2          4.2717         3  0.3625   11.784        11.784  \n","3        -64.7748         3 -0.2375  272.736       272.736  \n","4           4.884         3  0.2500   19.536        19.536  \n","\n","[5 rows x 31 columns]\n"]}]},{"cell_type":"markdown","source":["**13. Create a 3D scatter plot using Plotly.**"],"metadata":{"id":"Rd74GsYm-gR0"}},{"cell_type":"code","source":["import plotly.graph_objects as go\n","\n","# Sample 3D data (replace with your actual data)\n","x = [1, 2, 3, 4, 5]\n","y = [2, 4, 1, 5, 3]\n","z = [3, 1, 4, 2, 5]\n","\n","# Create the 3D scatter plot\n","fig = go.Figure(data=[go.Scatter3d(x=x, y=y, z=z, mode='markers')])\n","\n","# Customize the plot (optional)\n","fig.update_layout(title='3D Scatter Plot',\n","                  scene=dict(xaxis_title='X-axis',\n","                             yaxis_title='Y-axis',\n","                             zaxis_title='Z-axis'))\n","\n","fig.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":542},"id":"2lo3TWm4Ig7S","executionInfo":{"status":"ok","timestamp":1745503879464,"user_tz":-330,"elapsed":511,"user":{"displayName":"Vivek Lata","userId":"06357303755057465735"}},"outputId":"52a4fb68-6455-4f6f-cb25-81e4a3c2dd8f"},"execution_count":17,"outputs":[{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"9cee3b64-d53e-4458-9ff0-2396ed50ae30\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"9cee3b64-d53e-4458-9ff0-2396ed50ae30\")) {                    Plotly.newPlot(                        \"9cee3b64-d53e-4458-9ff0-2396ed50ae30\",                        [{\"mode\":\"markers\",\"x\":[1,2,3,4,5],\"y\":[2,4,1,5,3],\"z\":[3,1,4,2,5],\"type\":\"scatter3d\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"title\":{\"text\":\"3D Scatter Plot\"},\"scene\":{\"xaxis\":{\"title\":{\"text\":\"X-axis\"}},\"yaxis\":{\"title\":{\"text\":\"Y-axis\"}},\"zaxis\":{\"title\":{\"text\":\"Z-axis\"}}}},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('9cee3b64-d53e-4458-9ff0-2396ed50ae30');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}]}]}